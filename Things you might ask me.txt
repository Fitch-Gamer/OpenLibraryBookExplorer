Just a foreword, I have never had to write documentation, deploy a website to aws (but I have deployed a inecraft server to an ec2 instance) or write unit tests (although I have used and run my own tests just not specifically unit tests) so this is my understanding and from what I obtained from research.

1. How would you deploy the app to a cloud platform using (e.g. using Docker on AWS)
	On AWS, there are a few ways such as using an elastic beanstalk (https://docs.aws.amazon.com/vsts/latest/userguide/tutorial-eb.html) however you can also use an ec2 instance with a .bat file to initalize on start and use screen commands to mak eit persistance. then using elastic ip's you can make the ip address persistant. You can change the configuration of the asp.net web app and assign it a https certification to make sure it is secure and then use a dns provider/host to buy/rent a URL and then configure that to point at the elastic IP you've created to allow it to be accessed from a good looking url.

2. How would you write unit tests for the app?
	I would first isolate each component/function/method of the app such as the method which calls the web API or the javascript processing function. I can then test each part locally and would for example write the tests for the method that calls the web API by copying a list of the best selling books (https://en.wikipedia.org/wiki/List_of_best-selling_books) and putting them into a text file and looping through it calling the web API, first to check it doesn't crash or otherwise raise any issues and then compare either using a different program or manually that to what could be found on the openlibrary website, edge cases such as blank, just numbers, very long strings and similar would also have to be tested to make sure there are no issues with those also. A similar process cna be repeated for the rest of the parts such as the javascript which controls displaying the books by using the backend (now tested to be correct) and the previous looping system to make sure no errors arise and the visuals appear to be correct. This can simply be done by making sure no issues arise in the console. There would be some limits on what can be tested however due to the immense amount of data in the library.

3. How would you extend the current functionality to add value to the user?
	For the front end, it could be easily expanded upon by displaying the books in a grid pattern as well as an additional page which contains further information regarding the book. This could also be done in react.js for additional aesthetics although this doesn't necessarily add functionality.
	For the back end, additional search terms can be added for searching by author, first line etc supplemented by radiobuttons on the front end to allow for selection. 
	The API which is currently very slow can be sped up by storing a copy of the openlibrary database locally to avoid the delay in accessing their API, the copy can be updated reguarly e.g. every hour although that can cause some issues with some of the data. This would also allow for changing the images from being a link to the opanlibrary image to being a link to one on my own server which would also be quicker.